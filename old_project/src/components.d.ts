/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CitationStyleLang, SymThink, SymThinkDocument } from "./core/symthink.class";
import { Subject } from "rxjs";
export namespace Components {
    interface D2CardContainer {
        "canEdit": boolean;
        /**
          * Cannot pass this via html attribute. Data must be an object reference, so pass via JSX or Javascript.
         */
        "data": SymThinkDocument | SymThink;
        "domrect"?: DOMRect;
        "notify"?: Subject<string>;
    }
    interface D2CardItem {
        "canEdit": boolean;
        "item": SymThink;
        "parentDoc": SymThinkDocument;
        "sourceNumbers": number[];
    }
    interface D2ExpandButton {
    }
    interface D2ItemIcon {
        "isEnabled": boolean;
        "isNumeric": boolean;
        "itemNumber": number;
    }
    interface D2ItemOptions {
        "item": SymThink;
    }
    interface D2Rcard {
        "canEdit": boolean;
        /**
          * Cannot pass this via html attribute. Data must be an object reference, so pass via JSX or Javascript.
         */
        "data": SymThinkDocument | SymThink;
        "domrect"?: DOMRect;
        "notify"?: Subject<string>;
    }
    interface D2SourcesList {
        "canEdit": boolean;
        "sourceList": { id: string; index: number; src: CitationStyleLang }[];
    }
    interface D2SrcMetadata {
        "canEdit": boolean;
        "data": CitationStyleLang;
        "index": number;
        "listNo": number;
        "stid": string;
    }
    interface D2SupportItem {
        "canEdit": boolean;
        "isConclusion": boolean;
        "isVoteBreak": boolean;
        "isVoting": boolean;
        "item": SymThink;
        "itemNumber": number;
        "reOrderDisabled": boolean;
        "sourceNumbers": number[];
    }
    interface D2SupportList {
        "canEdit": boolean;
        "data": SymThink;
        "parentDoc": SymThinkDocument;
        "sourcList": { id: string; index: number; src: any }[];
    }
    interface D2TextEditor {
        "focus": () => Promise<void>;
        "height": number;
        "isTopItem": boolean;
        "item": SymThink;
        "placeholder": string;
    }
}
export interface D2CardContainerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLD2CardContainerElement;
}
export interface D2CardItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLD2CardItemElement;
}
export interface D2ExpandButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLD2ExpandButtonElement;
}
export interface D2ItemOptionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLD2ItemOptionsElement;
}
export interface D2RcardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLD2RcardElement;
}
export interface D2SrcMetadataCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLD2SrcMetadataElement;
}
export interface D2SupportItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLD2SupportItemElement;
}
export interface D2SupportListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLD2SupportListElement;
}
export interface D2TextEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLD2TextEditorElement;
}
declare global {
    interface HTMLD2CardContainerElement extends Components.D2CardContainer, HTMLStencilElement {
    }
    var HTMLD2CardContainerElement: {
        prototype: HTMLD2CardContainerElement;
        new (): HTMLD2CardContainerElement;
    };
    interface HTMLD2CardItemElement extends Components.D2CardItem, HTMLStencilElement {
    }
    var HTMLD2CardItemElement: {
        prototype: HTMLD2CardItemElement;
        new (): HTMLD2CardItemElement;
    };
    interface HTMLD2ExpandButtonElement extends Components.D2ExpandButton, HTMLStencilElement {
    }
    var HTMLD2ExpandButtonElement: {
        prototype: HTMLD2ExpandButtonElement;
        new (): HTMLD2ExpandButtonElement;
    };
    interface HTMLD2ItemIconElement extends Components.D2ItemIcon, HTMLStencilElement {
    }
    var HTMLD2ItemIconElement: {
        prototype: HTMLD2ItemIconElement;
        new (): HTMLD2ItemIconElement;
    };
    interface HTMLD2ItemOptionsElement extends Components.D2ItemOptions, HTMLStencilElement {
    }
    var HTMLD2ItemOptionsElement: {
        prototype: HTMLD2ItemOptionsElement;
        new (): HTMLD2ItemOptionsElement;
    };
    interface HTMLD2RcardElement extends Components.D2Rcard, HTMLStencilElement {
    }
    var HTMLD2RcardElement: {
        prototype: HTMLD2RcardElement;
        new (): HTMLD2RcardElement;
    };
    interface HTMLD2SourcesListElement extends Components.D2SourcesList, HTMLStencilElement {
    }
    var HTMLD2SourcesListElement: {
        prototype: HTMLD2SourcesListElement;
        new (): HTMLD2SourcesListElement;
    };
    interface HTMLD2SrcMetadataElement extends Components.D2SrcMetadata, HTMLStencilElement {
    }
    var HTMLD2SrcMetadataElement: {
        prototype: HTMLD2SrcMetadataElement;
        new (): HTMLD2SrcMetadataElement;
    };
    interface HTMLD2SupportItemElement extends Components.D2SupportItem, HTMLStencilElement {
    }
    var HTMLD2SupportItemElement: {
        prototype: HTMLD2SupportItemElement;
        new (): HTMLD2SupportItemElement;
    };
    interface HTMLD2SupportListElement extends Components.D2SupportList, HTMLStencilElement {
    }
    var HTMLD2SupportListElement: {
        prototype: HTMLD2SupportListElement;
        new (): HTMLD2SupportListElement;
    };
    interface HTMLD2TextEditorElement extends Components.D2TextEditor, HTMLStencilElement {
    }
    var HTMLD2TextEditorElement: {
        prototype: HTMLD2TextEditorElement;
        new (): HTMLD2TextEditorElement;
    };
    interface HTMLElementTagNameMap {
        "d2-card-container": HTMLD2CardContainerElement;
        "d2-card-item": HTMLD2CardItemElement;
        "d2-expand-button": HTMLD2ExpandButtonElement;
        "d2-item-icon": HTMLD2ItemIconElement;
        "d2-item-options": HTMLD2ItemOptionsElement;
        "d2-rcard": HTMLD2RcardElement;
        "d2-sources-list": HTMLD2SourcesListElement;
        "d2-src-metadata": HTMLD2SrcMetadataElement;
        "d2-support-item": HTMLD2SupportItemElement;
        "d2-support-list": HTMLD2SupportListElement;
        "d2-text-editor": HTMLD2TextEditorElement;
    }
}
declare namespace LocalJSX {
    interface D2CardContainer {
        "canEdit"?: boolean;
        /**
          * Cannot pass this via html attribute. Data must be an object reference, so pass via JSX or Javascript.
         */
        "data"?: SymThinkDocument | SymThink;
        "domrect"?: DOMRect;
        "notify"?: Subject<string>;
        "onDocAction"?: (event: D2CardContainerCustomEvent<{ action; value }>) => void;
        "onItemAction"?: (event: D2CardContainerCustomEvent<{
    action;
    value;
    domrect?: DOMRect;
    pointerEvent?: MouseEvent | PointerEvent;
  }>) => void;
    }
    interface D2CardItem {
        "canEdit"?: boolean;
        "item"?: SymThink;
        "onExpandClick"?: (event: D2CardItemCustomEvent<{ item: SymThink }>) => void;
        "onItemClick"?: (event: D2CardItemCustomEvent<{ item: SymThink, event: MouseEvent | PointerEvent }>) => void;
        "onKeyAction"?: (event: D2CardItemCustomEvent<{ key: string, type?: string }>) => void;
        "onOptionsClick"?: (event: D2CardItemCustomEvent<{ item: SymThink, event: MouseEvent | PointerEvent }>) => void;
        "onTextChange"?: (event: D2CardItemCustomEvent<{ item: SymThink, isModified: boolean }>) => void;
        "parentDoc"?: SymThinkDocument;
        "sourceNumbers"?: number[];
    }
    interface D2ExpandButton {
        "onExpandClick"?: (event: D2ExpandButtonCustomEvent<void>) => void;
    }
    interface D2ItemIcon {
        "isEnabled"?: boolean;
        "isNumeric"?: boolean;
        "itemNumber"?: number;
    }
    interface D2ItemOptions {
        "item"?: SymThink;
        "onOptionsClick"?: (event: D2ItemOptionsCustomEvent<{ item: SymThink, event: MouseEvent | PointerEvent }>) => void;
    }
    interface D2Rcard {
        "canEdit"?: boolean;
        /**
          * Cannot pass this via html attribute. Data must be an object reference, so pass via JSX or Javascript.
         */
        "data"?: SymThinkDocument | SymThink;
        "domrect"?: DOMRect;
        "notify"?: Subject<string>;
        "onDocAction"?: (event: D2RcardCustomEvent<{ action; value }>) => void;
        "onItemAction"?: (event: D2RcardCustomEvent<{
    action;
    value;
    domrect?: DOMRect;
    pointerEvent?: MouseEvent | PointerEvent;
  }>) => void;
    }
    interface D2SourcesList {
        "canEdit"?: boolean;
        "sourceList"?: { id: string; index: number; src: CitationStyleLang }[];
    }
    interface D2SrcMetadata {
        "canEdit"?: boolean;
        "data"?: CitationStyleLang;
        "index"?: number;
        "listNo"?: number;
        "onItemAction"?: (event: D2SrcMetadataCustomEvent<{ action; value }>) => void;
        "stid"?: string;
    }
    interface D2SupportItem {
        "canEdit"?: boolean;
        "isConclusion"?: boolean;
        "isVoteBreak"?: boolean;
        "isVoting"?: boolean;
        "item"?: SymThink;
        "itemNumber"?: number;
        "onExpandClick"?: (event: D2SupportItemCustomEvent<{ item: SymThink }>) => void;
        "onExtendClick"?: (event: D2SupportItemCustomEvent<{ item: SymThink }>) => void;
        "onItemClick"?: (event: D2SupportItemCustomEvent<{ item: SymThink, event: MouseEvent | PointerEvent }>) => void;
        "onKeyAction"?: (event: D2SupportItemCustomEvent<{ key: string, type?: string }>) => void;
        "onOptionsClick"?: (event: D2SupportItemCustomEvent<{ item: SymThink, event: MouseEvent | PointerEvent }>) => void;
        "onRemoveClick"?: (event: D2SupportItemCustomEvent<{ item: SymThink }>) => void;
        "onTextChange"?: (event: D2SupportItemCustomEvent<{ item: SymThink, isModified: boolean }>) => void;
        "reOrderDisabled"?: boolean;
        "sourceNumbers"?: number[];
    }
    interface D2SupportList {
        "canEdit"?: boolean;
        "data"?: SymThink;
        "onExpandClick"?: (event: D2SupportListCustomEvent<{ item: SymThink }>) => void;
        "onExtendClick"?: (event: D2SupportListCustomEvent<{ item: SymThink }>) => void;
        "onItemClick"?: (event: D2SupportListCustomEvent<{ item: SymThink, event: MouseEvent | PointerEvent, domrect?: DOMRect }>) => void;
        "onKeyAction"?: (event: D2SupportListCustomEvent<{ key: string, type?: string }>) => void;
        "onOptionsClick"?: (event: D2SupportListCustomEvent<{ item: SymThink, event: MouseEvent | PointerEvent }>) => void;
        "onRemoveClick"?: (event: D2SupportListCustomEvent<{ item: SymThink }>) => void;
        "onReorderItems"?: (event: D2SupportListCustomEvent<any>) => void;
        "onTextChange"?: (event: D2SupportListCustomEvent<{ item: SymThink, isModified: boolean }>) => void;
        "parentDoc"?: SymThinkDocument;
        "sourcList"?: { id: string; index: number; src: any }[];
    }
    interface D2TextEditor {
        "height"?: number;
        "isTopItem"?: boolean;
        "item"?: SymThink;
        "onKeyAction"?: (event: D2TextEditorCustomEvent<{ key: string, type?: string }>) => void;
        "onTextChange"?: (event: D2TextEditorCustomEvent<{ item: SymThink, isModified: boolean }>) => void;
        "placeholder"?: string;
    }
    interface IntrinsicElements {
        "d2-card-container": D2CardContainer;
        "d2-card-item": D2CardItem;
        "d2-expand-button": D2ExpandButton;
        "d2-item-icon": D2ItemIcon;
        "d2-item-options": D2ItemOptions;
        "d2-rcard": D2Rcard;
        "d2-sources-list": D2SourcesList;
        "d2-src-metadata": D2SrcMetadata;
        "d2-support-item": D2SupportItem;
        "d2-support-list": D2SupportList;
        "d2-text-editor": D2TextEditor;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "d2-card-container": LocalJSX.D2CardContainer & JSXBase.HTMLAttributes<HTMLD2CardContainerElement>;
            "d2-card-item": LocalJSX.D2CardItem & JSXBase.HTMLAttributes<HTMLD2CardItemElement>;
            "d2-expand-button": LocalJSX.D2ExpandButton & JSXBase.HTMLAttributes<HTMLD2ExpandButtonElement>;
            "d2-item-icon": LocalJSX.D2ItemIcon & JSXBase.HTMLAttributes<HTMLD2ItemIconElement>;
            "d2-item-options": LocalJSX.D2ItemOptions & JSXBase.HTMLAttributes<HTMLD2ItemOptionsElement>;
            "d2-rcard": LocalJSX.D2Rcard & JSXBase.HTMLAttributes<HTMLD2RcardElement>;
            "d2-sources-list": LocalJSX.D2SourcesList & JSXBase.HTMLAttributes<HTMLD2SourcesListElement>;
            "d2-src-metadata": LocalJSX.D2SrcMetadata & JSXBase.HTMLAttributes<HTMLD2SrcMetadataElement>;
            "d2-support-item": LocalJSX.D2SupportItem & JSXBase.HTMLAttributes<HTMLD2SupportItemElement>;
            "d2-support-list": LocalJSX.D2SupportList & JSXBase.HTMLAttributes<HTMLD2SupportListElement>;
            "d2-text-editor": LocalJSX.D2TextEditor & JSXBase.HTMLAttributes<HTMLD2TextEditorElement>;
        }
    }
}
